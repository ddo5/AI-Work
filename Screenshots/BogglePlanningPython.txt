DETAILS
- You are permitted to use only basic "standard" Python data structures, i.e., lists, dictionaries, and sets. Nothing fancy like Trie, 
	Queue, etc. which are complexity overkill that will just slow you down, confuse you, and impede your understanding of what you're 
	really doing. In short, the only package you may import for this program is the time package to do the timing. Everything else is 
	standard core Python.

- Any dictionary used will have the same format as the twl06 dictionary, i.e., one word per line in a text file.

- A boggle board file will consist of N lines of N letters separated by spaces. You should ignore extra space at the end of the line 
	or extra newlines at the end of a file.  (Hint: check out the python strip() function)

- should be able to take in whatever NxN board size you pass it

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Just as a reference point:  my solution has one main function of about 15 lines, 
	plus three smaller helpers to load/print out boards and stuff.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

How to think about this problem:

(a) starts in each of the possible starting points on the boggle board

(b) explores all possible paths from that point, recording/scoring any correct words it finds along the way. 

you have to subtract away any tiles that are already on the path you've already explored (can't use a tile twice!)



Programming Deliverables:

A "loadBoard" function that takes the filename of a board file, and loads that in to work on --- returns a new board data structure 
	(NxN matrix). Obviously you'll call this right at the start.

A "printBoard" function. Takes in a reference to a loaded board data structure (an NxN matrix) and prints it out. Simple.

A "possibleMoves" function. Takes in a current position (just an x-y pair) and a boggle board and generates all possible 
	next positions (x-y pairs in a list, set, or whatever you decide).

A "legalMoves" function. Takes in a list of possible moves (i.e. generated by PossibleMoves) as well as a path (list of x-y pairs) 
	of places you've already been, and essentially subtracts the latter from the former: the only legal moves are possible moves 
	minus any places that you've already been.

An examineState function that takes in a boggle board, a current position, and a path up to that position. It adds the current 
	position's tile to the path, computes the word now formed by that path, 
	and returns a tuple of (<current word generated>, <yes/no depending on whether that word is in dictionary>).